"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var PermissionsGetter = /*#__PURE__*/function () {
  function PermissionsGetter(_ref) {
    var configStore = _ref.configStore,
        env = _ref.env,
        permissionsFormatter = _ref.permissionsFormatter,
        forestServerRequester = _ref.forestServerRequester,
        moment = _ref.moment,
        VError = _ref.VError;
    (0, _classCallCheck2["default"])(this, PermissionsGetter);
    (0, _defineProperty2["default"])(this, "permissions", {});
    (0, _defineProperty2["default"])(this, "isRolesACLActivated", false);
    this.configStore = configStore;
    this.forestServerRequester = forestServerRequester;
    this.permissionsFormatter = permissionsFormatter;
    this.moment = moment;
    this.VError = VError;
    this.expirationInSeconds = env.FOREST_PERMISSIONS_EXPIRATION_IN_SECONDS || 3600;
  } // This permissions object is the cache, shared by all instances of PermissionsGetter.


  (0, _createClass2["default"])(PermissionsGetter, [{
    key: "cleanCache",
    value: function cleanCache() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          environmentId = _ref2.environmentId;

      if (environmentId) {
        this.permissions[environmentId] = {};
      } else {
        this.permissions = {};
      }
    }
  }, {
    key: "_getPermissions",
    value: function _getPermissions() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          environmentId = _ref3.environmentId,
          _ref3$initIfNotExisti = _ref3.initIfNotExisting,
          initIfNotExisting = _ref3$initIfNotExisti === void 0 ? false : _ref3$initIfNotExisti;

      if (environmentId) {
        if (!this.permissions[environmentId] && initIfNotExisting) {
          this.permissions[environmentId] = {};
        }

        return this.permissions[environmentId];
      }

      return this.permissions;
    }
  }, {
    key: "_getPermissionsInCollections",
    value: function _getPermissionsInCollections() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          environmentId = _ref4.environmentId;

      var permissions = this._getPermissions({
        environmentId: environmentId
      });

      return permissions && permissions.collections;
    }
  }, {
    key: "_getPermissionsInRendering",
    value: function _getPermissionsInRendering(renderingId) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref5.environmentId;

      var permissions = this._getPermissions({
        environmentId: environmentId
      });

      return permissions && permissions.renderings ? permissions.renderings[renderingId] : null;
    }
  }, {
    key: "_getCollectionPermissions",
    value: function _getCollectionPermissions(renderingId, collectionName) {
      var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref6.environmentId;

      var modelsPermissions;

      if (this.isRolesACLActivated) {
        modelsPermissions = this._getPermissionsInCollections({
          environmentId: environmentId
        });
      } else {
        modelsPermissions = this._getPermissionsInRendering(renderingId, {
          environmentId: environmentId
        });
      }

      return modelsPermissions && modelsPermissions.data ? modelsPermissions.data[collectionName] : null;
    }
  }, {
    key: "_getScopePermissions",
    value: function _getScopePermissions(renderingId, collectionName) {
      var _ref7 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref7.environmentId;

      var getPermissionsInRendering = this._getPermissionsInRendering(renderingId, {
        environmentId: environmentId
      });

      return getPermissionsInRendering && getPermissionsInRendering.data && getPermissionsInRendering.data[collectionName] ? getPermissionsInRendering.data[collectionName].scope : null;
    }
  }, {
    key: "_getStatsPermissions",
    value: function _getStatsPermissions(renderingId) {
      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref8.environmentId;

      var getPermissionsInRendering = this._getPermissionsInRendering(renderingId, {
        environmentId: environmentId
      });

      return getPermissionsInRendering && getPermissionsInRendering.data && getPermissionsInRendering.data.stats ? getPermissionsInRendering.data.stats : {
        queries: [],
        leaderboards: [],
        lines: [],
        objectives: [],
        percentages: [],
        pies: [],
        values: []
      };
    }
  }, {
    key: "_setRenderingPermissions",
    value: function _setRenderingPermissions(renderingId, permissions) {
      var _ref9 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref9.environmentId;

      var options = {
        environmentId: environmentId,
        initIfNotExisting: true
      };

      if (!this._getPermissions(options).renderings) {
        this._getPermissions(options).renderings = {};
      }

      this._getPermissions(options).renderings[renderingId] = {
        data: permissions,
        lastRetrieve: this.moment()
      };
    }
  }, {
    key: "_setCollectionsPermissions",
    value: function _setCollectionsPermissions(permissions) {
      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref10.environmentId;

      this._getPermissions({
        environmentId: environmentId,
        initIfNotExisting: true
      }).collections = {
        data: permissions,
        lastRetrieve: this.moment()
      };
    }
  }, {
    key: "_setRolesACLPermissions",
    value: function _setRolesACLPermissions(renderingId, permissions) {
      var _ref11 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref11.environmentId;

      this._setCollectionsPermissions(permissions.collections, {
        environmentId: environmentId
      });

      if (permissions.renderings && permissions.renderings[renderingId]) {
        this._setRenderingPermissions(renderingId, permissions.renderings[renderingId], {
          environmentId: environmentId
        });
      }
    } // In the teamACL format, all the permissions are stored by renderingId into "renderings".
    // For the rolesACL format, the collections permissions are stored directly into "collections",
    // and only their scopes and stats are stored by renderingId into "renderings".

  }, {
    key: "_setPermissions",
    value: function _setPermissions(renderingId, permissions) {
      var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref12.environmentId;

      var stats = arguments.length > 3 ? arguments[3] : undefined;

      if (this.isRolesACLActivated) {
        this._setRolesACLPermissions(renderingId, permissions, {
          environmentId: environmentId
        });
      } else {
        var newFormatPermissions = permissions ? this.permissionsFormatter.transformPermissionsFromOldToNewFormat(permissions) : null;

        this._setRenderingPermissions(renderingId, newFormatPermissions, {
          environmentId: environmentId
        });
      } // NOTICE: Add stats permissions to the RenderingPermissions


      if (stats) {
        this._getPermissionsInRendering(renderingId, {
          environmentId: environmentId
        }).data.stats = stats;
      }
    }
  }, {
    key: "_getLastRetrieveTimeInRendering",
    value: function _getLastRetrieveTimeInRendering(renderingId) {
      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref13.environmentId;

      return this._getPermissionsInRendering(renderingId, {
        environmentId: environmentId
      }) ? this._getPermissionsInRendering(renderingId, {
        environmentId: environmentId
      }).lastRetrieve : null;
    }
  }, {
    key: "_getLastRetrieveTimeInCollections",
    value: function _getLastRetrieveTimeInCollections() {
      var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          environmentId = _ref14.environmentId;

      var permissionsInCollection = this._getPermissionsInCollections({
        environmentId: environmentId
      });

      return permissionsInCollection ? permissionsInCollection.lastRetrieve : null;
    }
  }, {
    key: "resetExpiration",
    value: function resetExpiration(renderingId) {
      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref15.environmentId;

      if (this.isRolesACLActivated && this._getPermissionsInCollections({
        environmentId: environmentId
      })) {
        this._getPermissionsInCollections({
          environmentId: environmentId
        }).lastRetrieve = null;
      }

      if (this._getPermissionsInRendering(renderingId, {
        environmentId: environmentId
      })) {
        this._getPermissionsInRendering(renderingId, {
          environmentId: environmentId
        }).lastRetrieve = null;
      }
    }
  }, {
    key: "_isPermissionExpired",
    value: function _isPermissionExpired(lastRetrieveTime) {
      if (!lastRetrieveTime) return true;
      var currentTime = this.moment();
      var elapsedSeconds = currentTime.diff(lastRetrieveTime, 'seconds');
      return elapsedSeconds >= this.expirationInSeconds;
    }
  }, {
    key: "_isRegularRetrievalRequired",
    value: function _isRegularRetrievalRequired(renderingId) {
      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          environmentId = _ref16.environmentId;

      if (this.isRolesACLActivated) {
        var lastRetrieveInCollections = this._getLastRetrieveTimeInCollections({
          environmentId: environmentId
        });

        return this._isPermissionExpired(lastRetrieveInCollections);
      }

      var lastRetrieveInRendering = this._getLastRetrieveTimeInRendering(renderingId, {
        environmentId: environmentId
      });

      return this._isPermissionExpired(lastRetrieveInRendering);
    }
  }, {
    key: "_isRenderingOnlyRetrievalRequired",
    value: function _isRenderingOnlyRetrievalRequired(renderingId, permissionName) {
      var _ref17 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          environmentId = _ref17.environmentId;

      var lastRetrieve = this._getLastRetrieveTimeInRendering(renderingId, {
        environmentId: environmentId
      });

      return this.isRolesACLActivated && permissionName === 'browseEnabled' && this._isPermissionExpired(lastRetrieve);
    }
  }, {
    key: "_handleRetrieve",
    value: function () {
      var _handleRetrieve2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(responseBody, renderingId, renderingOnly, environmentId) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.isRolesACLActivated = responseBody.meta ? responseBody.meta.rolesACLActivated : false;

                if (responseBody.data) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", null);

              case 3:
                if (!renderingOnly) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", responseBody.data.renderings ? this._setRenderingPermissions(renderingId, _objectSpread({
                  stats: responseBody.stats
                }, responseBody.data.renderings[renderingId]), {
                  environmentId: environmentId
                }) : null);

              case 5:
                return _context.abrupt("return", this._setPermissions(renderingId, responseBody.data, {
                  environmentId: environmentId
                }, responseBody.stats));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _handleRetrieve(_x, _x2, _x3, _x4) {
        return _handleRetrieve2.apply(this, arguments);
      }

      return _handleRetrieve;
    }()
  }, {
    key: "_retrievePermissions",
    value: function () {
      var _retrievePermissions2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(renderingId) {
        var _this = this;

        var _ref18,
            _ref18$renderingOnly,
            renderingOnly,
            environmentId,
            queryParams,
            _args2 = arguments;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref18 = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, _ref18$renderingOnly = _ref18.renderingOnly, renderingOnly = _ref18$renderingOnly === void 0 ? false : _ref18$renderingOnly, environmentId = _ref18.environmentId;
                queryParams = {
                  renderingId: renderingId
                };
                if (renderingOnly) queryParams.renderingSpecificOnly = true;
                return _context2.abrupt("return", this.forestServerRequester.perform('/liana/v3/permissions', this.environmentSecret, queryParams).then(function (res) {
                  return _this._handleRetrieve(res, renderingId, renderingOnly, environmentId);
                })["catch"](function (error) {
                  return Promise.reject(new _this.VError(error, 'Permissions error'));
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _retrievePermissions(_x5) {
        return _retrievePermissions2.apply(this, arguments);
      }

      return _retrievePermissions;
    }()
  }, {
    key: "getPermissions",
    value: function () {
      var _getPermissions2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(renderingId, collectionName, permissionName) {
        var _ref19,
            _ref19$forceRetrieve,
            forceRetrieve,
            _ref19$environmentId,
            environmentId,
            collectionPermissions,
            scope,
            stats,
            _args3 = arguments;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref19 = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {}, _ref19$forceRetrieve = _ref19.forceRetrieve, forceRetrieve = _ref19$forceRetrieve === void 0 ? false : _ref19$forceRetrieve, _ref19$environmentId = _ref19.environmentId, environmentId = _ref19$environmentId === void 0 ? undefined : _ref19$environmentId;

                if (!(forceRetrieve || this._isRegularRetrievalRequired(renderingId, {
                  environmentId: environmentId
                }))) {
                  _context3.next = 6;
                  break;
                }

                _context3.next = 4;
                return this._retrievePermissions(renderingId, {
                  environmentId: environmentId
                });

              case 4:
                _context3.next = 9;
                break;

              case 6:
                if (!this._isRenderingOnlyRetrievalRequired(renderingId, permissionName, {
                  environmentId: environmentId
                })) {
                  _context3.next = 9;
                  break;
                }

                _context3.next = 9;
                return this._retrievePermissions(renderingId, {
                  renderingOnly: true,
                  environmentId: environmentId
                });

              case 9:
                collectionPermissions = this._getCollectionPermissions(renderingId, collectionName, {
                  environmentId: environmentId
                });
                scope = this._getScopePermissions(renderingId, collectionName, {
                  environmentId: environmentId
                });
                stats = this._getStatsPermissions(renderingId, {
                  environmentId: environmentId
                });
                return _context3.abrupt("return", {
                  collection: collectionPermissions ? collectionPermissions.collection : null,
                  actions: collectionPermissions ? collectionPermissions.actions : null,
                  stats: stats,
                  scope: scope
                });

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getPermissions(_x6, _x7, _x8) {
        return _getPermissions2.apply(this, arguments);
      }

      return getPermissions;
    }()
  }, {
    key: "environmentSecret",
    get: function get() {
      return this.configStore.lianaOptions.envSecret;
    }
  }]);
  return PermissionsGetter;
}();

module.exports = PermissionsGetter;