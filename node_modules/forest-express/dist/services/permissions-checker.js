"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _require = require('lodash'),
    clone = _require.clone;

var PermissionsChecker = /*#__PURE__*/function () {
  function PermissionsChecker(_ref) {
    var baseFilterParser = _ref.baseFilterParser,
        logger = _ref.logger,
        permissionsGetter = _ref.permissionsGetter;
    (0, _classCallCheck2["default"])(this, PermissionsChecker);
    this.baseFilterParser = baseFilterParser;
    this.logger = logger;
    this.permissionsGetter = permissionsGetter;
  }

  (0, _createClass2["default"])(PermissionsChecker, [{
    key: "_isScopeValid",
    value: function () {
      var _isScopeValid2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(permissionInfos, scope) {
        var expectedConditionFilters, isScopeAggregation, isScopeCondition, scopeFound, isValidSingleConditionScope, isSameScope;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                expectedConditionFilters = PermissionsChecker._computeConditionFiltersFromScope(permissionInfos.userId, scope); // Find aggregated condition. filtredConditions represent an array of conditions that were
                // tagged based on if it is present in the scope

                isScopeAggregation = function isScopeAggregation(aggregator, conditions) {
                  return PermissionsChecker._isAggregationFromScope(aggregator, conditions, expectedConditionFilters);
                }; // Find in a condition correspond to a scope condition or not


                isScopeCondition = function isScopeCondition(condition) {
                  return PermissionsChecker._isConditionFromScope(condition, expectedConditionFilters.conditions);
                }; // Perform a travel to find the scope in filters


                _context.next = 5;
                return this.baseFilterParser.perform(permissionInfos.filters, isScopeAggregation, isScopeCondition);

              case 5:
                scopeFound = _context.sent;
                // In the case of only one expected condition, server will still send an aggregator which will
                // not match the request. If one condition is found and is from scope then the request is valid
                isValidSingleConditionScope = !!scopeFound && expectedConditionFilters.conditions.length === 1;
                isSameScope = !!scopeFound && scopeFound.aggregator === expectedConditionFilters.aggregator && !!scopeFound.conditions && scopeFound.conditions.length === expectedConditionFilters.conditions.length;
                return _context.abrupt("return", isValidSingleConditionScope || isSameScope);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _isScopeValid(_x, _x2) {
        return _isScopeValid2.apply(this, arguments);
      }

      return _isScopeValid;
    }()
  }, {
    key: "_isCollectionBrowseAllowed",
    value: function () {
      var _isCollectionBrowseAllowed2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(collectionPermissions, permissionInfos, scope) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!collectionPermissions || !permissionInfos || !PermissionsChecker._isPermissionAllowed(collectionPermissions.browseEnabled, permissionInfos.userId))) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", false);

              case 2:
                if (scope) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return", true);

              case 4:
                _context2.prev = 4;
                return _context2.abrupt("return", this._isScopeValid(permissionInfos, scope));

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](4);
                this.logger.error(_context2.t0);
                return _context2.abrupt("return", false);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[4, 8]]);
      }));

      function _isCollectionBrowseAllowed(_x3, _x4, _x5) {
        return _isCollectionBrowseAllowed2.apply(this, arguments);
      }

      return _isCollectionBrowseAllowed;
    }()
  }, {
    key: "_isAllowed",
    value: function () {
      var _isAllowed2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(permissions, permissionName, permissionInfos) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.t0 = permissionName;
                _context3.next = _context3.t0 === 'actions' ? 3 : _context3.t0 === 'browseEnabled' ? 4 : _context3.t0 === 'liveQueries' ? 5 : _context3.t0 === 'statWithParameters' ? 6 : 7;
                break;

              case 3:
                return _context3.abrupt("return", PermissionsChecker._isSmartActionAllowed(permissions.actions, permissionInfos));

              case 4:
                return _context3.abrupt("return", this._isCollectionBrowseAllowed(permissions.collection, permissionInfos, permissions.scope));

              case 5:
                return _context3.abrupt("return", PermissionsChecker._isLiveQueryAllowed(permissions.stats.queries, permissionInfos));

              case 6:
                return _context3.abrupt("return", PermissionsChecker._isStatWithParametersAllowed(permissions.stats, permissionInfos));

              case 7:
                return _context3.abrupt("return", permissions.collection ? PermissionsChecker._isPermissionAllowed(permissions.collection[permissionName], permissionInfos.userId) : null);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _isAllowed(_x6, _x7, _x8) {
        return _isAllowed2.apply(this, arguments);
      }

      return _isAllowed;
    }()
  }, {
    key: "checkPermissions",
    value: function () {
      var _checkPermissions = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(renderingId, collectionName, permissionName, permissionInfos) {
        var _this = this;

        var environmentId,
            getPermissions,
            isAllowed,
            _args6 = arguments;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                environmentId = _args6.length > 4 && _args6[4] !== undefined ? _args6[4] : undefined;

                getPermissions = /*#__PURE__*/function () {
                  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(forceRetrieve) {
                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            return _context4.abrupt("return", _this.permissionsGetter.getPermissions(renderingId, collectionName, permissionName, {
                              forceRetrieve: forceRetrieve,
                              environmentId: environmentId
                            }));

                          case 1:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));

                  return function getPermissions(_x13) {
                    return _ref2.apply(this, arguments);
                  };
                }();

                isAllowed = /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
                    var _ref4,
                        _ref4$forceRetrieve,
                        forceRetrieve,
                        _args5 = arguments;

                    return _regenerator["default"].wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _ref4 = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {}, _ref4$forceRetrieve = _ref4.forceRetrieve, forceRetrieve = _ref4$forceRetrieve === void 0 ? false : _ref4$forceRetrieve;
                            _context5.t0 = _this;
                            _context5.next = 4;
                            return getPermissions(forceRetrieve);

                          case 4:
                            _context5.t1 = _context5.sent;
                            _context5.t2 = permissionName;
                            _context5.t3 = permissionInfos;
                            return _context5.abrupt("return", _context5.t0._isAllowed.call(_context5.t0, _context5.t1, _context5.t2, _context5.t3));

                          case 8:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5);
                  }));

                  return function isAllowed() {
                    return _ref3.apply(this, arguments);
                  };
                }();

                _context6.next = 5;
                return isAllowed();

              case 5:
                _context6.t0 = _context6.sent;

                if (_context6.t0) {
                  _context6.next = 10;
                  break;
                }

                _context6.next = 9;
                return isAllowed({
                  forceRetrieve: true
                });

              case 9:
                _context6.t0 = _context6.sent;

              case 10:
                if (!_context6.t0) {
                  _context6.next = 12;
                  break;
                }

                return _context6.abrupt("return", null);

              case 12:
                throw new Error("'".concat(permissionName, "' access forbidden on ").concat(collectionName));

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function checkPermissions(_x9, _x10, _x11, _x12) {
        return _checkPermissions.apply(this, arguments);
      }

      return checkPermissions;
    }()
  }], [{
    key: "_isPermissionAllowed",
    value: function _isPermissionAllowed(permissionValue, userId) {
      return Array.isArray(permissionValue) ? permissionValue.includes(Number.parseInt(userId, 10)) : !!permissionValue;
    }
  }, {
    key: "_isSmartActionAllowed",
    value: function _isSmartActionAllowed(smartActionsPermissions, permissionInfos) {
      if (!permissionInfos || !permissionInfos.userId || !permissionInfos.actionName || !smartActionsPermissions || !smartActionsPermissions[permissionInfos.actionName]) {
        return false;
      }

      var userId = permissionInfos.userId,
          actionName = permissionInfos.actionName;
      var triggerEnabled = smartActionsPermissions[actionName].triggerEnabled;
      return PermissionsChecker._isPermissionAllowed(triggerEnabled, userId);
    }
  }, {
    key: "_isLiveQueryAllowed",
    value: function _isLiveQueryAllowed(liveQueriesPermissions, permissionInfos) {
      return liveQueriesPermissions.includes(permissionInfos);
    }
  }, {
    key: "_isStatWithParametersAllowed",
    value: function _isStatWithParametersAllowed(statsPermissions, permissionInfos) {
      var permissionsPool = statsPermissions["".concat(permissionInfos.type.toLowerCase(), "s")];
      var arrayPermissionInfos = Object.values(permissionInfos);
      return permissionsPool.some(function (statPermission) {
        var arrayStatPermission = Object.values(statPermission);
        return arrayPermissionInfos.every(function (info) {
          return arrayStatPermission.includes(info);
        });
      });
    } // Compute a scope to replace $currentUser variables with the actual user values. This will
    // generate the expected conditions filters when applied on the server scope response.

  }, {
    key: "_computeConditionFiltersFromScope",
    value: function _computeConditionFiltersFromScope(userId, scope) {
      var computedConditionFilters = clone(scope.filter);
      computedConditionFilters.conditions.forEach(function (condition) {
        if (condition.value && "".concat(condition.value).startsWith('$') && scope.dynamicScopesValues.users[userId]) {
          condition.value = scope.dynamicScopesValues.users[userId][condition.value];
        }
      });
      return computedConditionFilters;
    }
  }, {
    key: "_isAggregationFromScope",
    value: function _isAggregationFromScope(aggregator, conditions, expectedConditionFilters) {
      var filtredConditions = conditions.filter(Boolean); // Exit case - filtredConditions[0] should be the scope

      if (filtredConditions.length === 1 && filtredConditions[0].aggregator && aggregator === 'and') {
        return filtredConditions[0];
      } // During the tree travel, check if `conditions` & `aggregator` match with expectations


      return filtredConditions.length === expectedConditionFilters.conditions.length && (aggregator === expectedConditionFilters.aggregator || aggregator === 'and') ? {
        aggregator: aggregator,
        conditions: filtredConditions
      } : null;
    } // Check if `expectedConditionFilters` at least contains a definition of `actualConditionFilters`

  }, {
    key: "_isConditionFromScope",
    value: function _isConditionFromScope(actualFilterCondition, expectedFilterConditions) {
      return expectedFilterConditions.filter(function (expectedCondition) {
        return expectedCondition.value === actualFilterCondition.value && expectedCondition.operator === actualFilterCondition.operator && expectedCondition.field === actualFilterCondition.field;
      }).length > 0;
    }
  }]);
  return PermissionsChecker;
}();

module.exports = PermissionsChecker;