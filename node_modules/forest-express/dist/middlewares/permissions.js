"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var httpError = require('http-errors');

var _require = require('../utils/string'),
    parameterize = _require.parameterize;

var context = require('../context');

var Schemas = require('../generators/schemas');

var getRenderingIdFromUser = function getRenderingIdFromUser(user) {
  return user.renderingId;
};

var PermissionMiddlewareCreator = /*#__PURE__*/function () {
  function PermissionMiddlewareCreator(collectionName) {
    (0, _classCallCheck2["default"])(this, PermissionMiddlewareCreator);
    this.collectionName = collectionName;

    var _context$inject = context.inject(),
        configStore = _context$inject.configStore,
        logger = _context$inject.logger,
        permissionsChecker = _context$inject.permissionsChecker;

    this.logger = logger;
    this.permissionsChecker = permissionsChecker;
    this.configStore = configStore;
  }

  (0, _createClass2["default"])(PermissionMiddlewareCreator, [{
    key: "_getSmartActionInfoFromRequest",
    value: function _getSmartActionInfoFromRequest(request) {
      var smartActionEndpoint = request.originalUrl;
      var smartActionHTTPMethod = request.method;
      var smartAction = Schemas.schemas[this.collectionName].actions.find(function (action) {
        var endpoint = action.endpoint || "/forest/actions/".concat(parameterize(action.name));
        var method = action.httpMethod || 'POST';
        return endpoint === smartActionEndpoint && method === smartActionHTTPMethod;
      });

      if (!smartAction) {
        throw new Error("Impossible to retrieve the smart action at endpoint ".concat(smartActionEndpoint, " and method ").concat(smartActionHTTPMethod));
      }

      return {
        userId: request.user.id,
        actionName: smartAction.name
      };
    }
  }, {
    key: "_getPermissionsInfo",
    value: function _getPermissionsInfo(permissionName, request) {
      switch (permissionName) {
        case 'actions':
          return this._getSmartActionInfoFromRequest(request);

        case 'browseEnabled':
          return PermissionMiddlewareCreator._getCollectionListInfoFromRequest(request);

        case 'liveQueries':
          return PermissionMiddlewareCreator._getLiveQueriesInfoFromRequest(request);

        case 'statWithParameters':
          return PermissionMiddlewareCreator._getStatWithParametersInfoFromRequest(request);

        default:
          return {
            userId: request.user.id
          };
      }
    }
  }, {
    key: "_checkPermission",
    value: function _checkPermission(permissionName) {
      var _this = this;

      return /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(request, response, next) {
          var renderingId, permissionInfos, environmentId;
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  renderingId = getRenderingIdFromUser(request.user);
                  permissionInfos = _this._getPermissionsInfo(permissionName, request);
                  environmentId = _this.configStore.lianaOptions.multiplePermissionsCache ? _this.configStore.lianaOptions.multiplePermissionsCache.getEnvironmentId(request) : null;
                  _context.prev = 3;
                  _context.next = 6;
                  return _this.permissionsChecker.checkPermissions(renderingId, _this.collectionName, permissionName, permissionInfos, environmentId);

                case 6:
                  next();
                  _context.next = 13;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](3);

                  _this.logger.error(_context.t0);

                  next(httpError(403));

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 9]]);
        }));

        return function (_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    }
  }, {
    key: "list",
    value: function list() {
      return this._checkPermission('browseEnabled');
    }
  }, {
    key: "export",
    value: function _export() {
      return this._checkPermission('exportEnabled');
    }
  }, {
    key: "details",
    value: function details() {
      return this._checkPermission('readEnabled');
    }
  }, {
    key: "create",
    value: function create() {
      return this._checkPermission('addEnabled');
    }
  }, {
    key: "update",
    value: function update() {
      return this._checkPermission('editEnabled');
    }
  }, {
    key: "delete",
    value: function _delete() {
      return this._checkPermission('deleteEnabled');
    }
  }, {
    key: "smartAction",
    value: function smartAction() {
      return this._checkPermission('actions');
    }
  }, {
    key: "liveQueries",
    value: function liveQueries() {
      return this._checkPermission('liveQueries');
    }
  }, {
    key: "statWithParameters",
    value: function statWithParameters() {
      return this._checkPermission('statWithParameters');
    }
  }], [{
    key: "_getCollectionListInfoFromRequest",
    value: function _getCollectionListInfoFromRequest(request) {
      return _objectSpread({
        userId: request.user.id
      }, request.query);
    }
  }, {
    key: "_getLiveQueriesInfoFromRequest",
    value: function _getLiveQueriesInfoFromRequest(request) {
      var query = request.body.query;
      return query;
    }
  }, {
    key: "_getStatWithParametersInfoFromRequest",
    value: function _getStatWithParametersInfoFromRequest(request) {
      var parameters = _objectSpread({}, request.body); // NOTICE: Remove useless information


      delete parameters.timezone; // NOTICE: Remove the field information from group_by_field => collection:id

      if (parameters.group_by_field) {
        var _parameters$group_by_ = parameters.group_by_field.split(':');

        var _parameters$group_by_2 = (0, _slicedToArray2["default"])(_parameters$group_by_, 1);

        parameters.group_by_field = _parameters$group_by_2[0];
      }

      return parameters;
    }
  }]);
  return PermissionMiddlewareCreator;
}();

module.exports = PermissionMiddlewareCreator;