"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectTools = _interopRequireDefault(require("./object-tools"));

var _orm = _interopRequireDefault(require("./orm"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

exports.getReferenceSchema = function (schemas, modelSchema, associationName) {
  const schemaField = modelSchema.fields.find(function (field) {
    return field.field === associationName;
  }); // NOTICE: No reference field found, no name transformation tried.

  if (!schemaField || !schemaField.reference) {
    return null;
  }

  const [tableName] = schemaField.reference.split('.');
  return schemas[tableName];
};

exports.getReferenceField = function (schemas, modelSchema, associationName, fieldName) {
  const associationSchema = exports.getReferenceSchema(schemas, modelSchema, associationName, fieldName); // NOTICE: No association schema found, no name transformation tried.

  if (!associationSchema) {
    return `${associationName}.${fieldName}`;
  }

  const belongsToColumnName = _orm.default.getColumnName(associationSchema, fieldName);

  return `${associationName}.${belongsToColumnName}`;
};
/**
 * When they don't have common keys, merge objects together.
 * This is used to avoid having too many nested 'AND' conditions on sequelize queries, which
 * makes debugging and testing more painful than it could be.
 */


exports.mergeWhere = function (operators, ...wheres) {
  return wheres.filter(Boolean).reduce(function (where1, where2) {
    return _objectTools.default.plainObjectsShareNoKeys(where1, where2) ? _objectSpread(_objectSpread({}, where1), where2) : {
      [operators.AND]: [where1, where2]
    };
  });
};