"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _sequelizeCompatibility = _interopRequireDefault(require("../utils/sequelize-compatibility"));

var _primaryKeysManager = _interopRequireDefault(require("./primary-keys-manager"));

var _resourcesGetter = _interopRequireDefault(require("./resources-getter"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class HasManyGetter extends _resourcesGetter.default {
  constructor(model, association, lianaOptions, params) {
    super(association, lianaOptions, params);
    this._parentModel = model.unscoped();
  }

  async _getRecords() {
    const options = await this._buildQueryOptions();
    const record = await this._parentModel.findOne(options);
    return record && record[this._params.associationName] || [];
  }

  async count() {
    const options = await this._buildQueryOptions({
      forCount: true
    });
    return this._parentModel.count(options);
  }

  async _buildQueryOptions(buildOptions = {}) {
    const {
      associationName,
      recordId
    } = this._params;
    const [model, options] = await super._buildQueryOptions(_objectSpread(_objectSpread({}, buildOptions), {}, {
      tableAlias: associationName
    }));

    const parentOptions = _sequelizeCompatibility.default.postProcess(this._parentModel, {
      where: new _primaryKeysManager.default(this._parentModel).getRecordsConditions([recordId]),
      include: [_objectSpread({
        model,
        as: associationName,
        scope: false,
        required: !!buildOptions.forCount
      }, (0, _lodash.pick)(options, ['where', 'include']))]
    });

    if (!buildOptions.forCount) {
      parentOptions.subQuery = false; // Why?

      parentOptions.attributes = []; // Don't fetch parent attributes (perf)

      parentOptions.offset = options.offset;
      parentOptions.limit = options.limit; // Order with the relation (https://github.com/sequelize/sequelize/issues/4553)

      if (options.order) {
        parentOptions.order = options.order.map(function (fields) {
          return [associationName, ...fields];
        });
      }
    }

    return parentOptions;
  }

}

module.exports = HasManyGetter;