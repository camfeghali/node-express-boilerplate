"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.promise");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = _interopRequireDefault(require("lodash"));

var _forestExpress = require("forest-express");

var _primaryKeysManager = _interopRequireDefault(require("./primary-keys-manager"));

var _queryOptions = _interopRequireDefault(require("./query-options"));

var _requestedFieldsExtractor = _interopRequireDefault(require("./requested-fields-extractor"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class ResourcesGetter {
  constructor(model, lianaOptions, params) {
    // The lianaOptions argument is kept for retrocompatibility w/ forest-express.
    this._model = model.unscoped();
    this._params = params !== null && params !== void 0 ? params : lianaOptions;
  }

  async perform() {
    return [await this._getRecords(), await this._getFieldsSearched()];
  }
  /** Count records matching current query (wo/ pagination) */


  async count() {
    const [model, options] = await this._buildQueryOptions({
      forCount: true
    }); // If no primary key is found, use * as a fallback for Sequelize.

    return model.count(_objectSpread(_objectSpread({}, options), {}, {
      col: _lodash.default.isEmpty(this._model.primaryKeys) ? '*' : undefined
    }));
  }
  /** Load records matching current query (w/ pagination) */


  async _getRecords() {
    const [model, options] = await this._buildQueryOptions();
    const records = await model.findAll(options);
    new _primaryKeysManager.default(this._model).annotateRecords(records);
    return records;
  }
  /** Get list of fields descriptors which are used when searching (for frontend highlighting). */


  async _getFieldsSearched() {
    const {
      fields,
      search,
      searchExtended
    } = this._params;
    const requestedFields = (0, _requestedFieldsExtractor.default)(fields, this._model, _forestExpress.Schemas.schemas);
    const queryOptions = new _queryOptions.default(this._model);
    await queryOptions.requireFields(requestedFields);
    return queryOptions.search(search, searchExtended);
  }
  /** Compute query options (shared for count and getRecords) */


  async _buildQueryOptions(buildOptions = {}) {
    const {
      forCount,
      tableAlias
    } = buildOptions;
    const {
      fields,
      filters,
      search,
      searchExtended,
      segment,
      segmentQuery,
      timezone
    } = this._params;
    const requestedFields = (0, _requestedFieldsExtractor.default)(fields, this._model, _forestExpress.Schemas.schemas);
    const queryOptions = new _queryOptions.default(this._model, {
      tableAlias
    });
    await queryOptions.requireFields(requestedFields);
    await queryOptions.search(search, searchExtended);
    await queryOptions.filterByConditionTree(filters, timezone);
    await queryOptions.segment(segment);
    await queryOptions.segmentQuery(segmentQuery);

    if (!forCount) {
      const {
        sort,
        page
      } = this._params;
      await queryOptions.sort(sort);
      await queryOptions.paginate(page === null || page === void 0 ? void 0 : page.number, page === null || page === void 0 ? void 0 : page.size);
    }

    return [// add scopes to model
    queryOptions.sequelizeScopes.reduce(function (m, scope) {
      return m.scope(scope);
    }, this._model), queryOptions.sequelizeOptions];
  }

}

module.exports = ResourcesGetter;